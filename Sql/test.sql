/*
Navicat MySQL Data Transfer

Source Server         : 127.0.0.1
Source Server Version : 50542
Source Host           : localhost:3306
Source Database       : test

Target Server Type    : MYSQL
Target Server Version : 50542
File Encoding         : 65001

Date: 2016-07-07 18:24:27
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for blog_article
-- ----------------------------
DROP TABLE IF EXISTS `blog_article`;
CREATE TABLE `blog_article` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `summary` text,
  `content` longtext,
  `tags` varchar(2048) NOT NULL DEFAULT '1',
  `views` int(11) unsigned DEFAULT '0',
  `likes` int(11) unsigned DEFAULT '0',
  `is_delete` tinyint(1) NOT NULL DEFAULT '0',
  `create_time` int(11) DEFAULT NULL,
  `update_time` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=113 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_article
-- ----------------------------
INSERT INTO `blog_article` VALUES ('1', 'asdasdsa', '&lt;h1&gt;thinkphp自学 version3.2.3&lt;/h1&gt;&lt;h1&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;p&gt;新版采用模块化的设计架构，下面是一个应用目录下面的模块目录结构，每个模块可以方便的卸载和部署，并且支持公共模块。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Application 默认应用目录（可以设置）\r\n├─Common 公共模块（不能直接访问）\r\n├─Home 前台模块\r\n├─Admin 后台模块\r\n├─... 其他更多模块\r\n├─Runtime 默认运行时目录（可以设置）\r\n每个模块是相对独立的，其目录结构如下：\r\n├─Module 模块目录\r\n│ ├─Conf 配置文件目录\r\n│ ├─Common 公共函数目录\r\n│ ├─Controller 控制器目录\r\n│ ├─Model 模型目录\r\n│ ├─Logic 逻辑目录（可选）\r\n│ ├─Service Service目录（可选）\r\n│ ... 更多分层目录可选\r\n│ └─View 视图目录\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;读取配置项&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;每个模块会自动加载自己的配置文件（位于 Application/当前模块名/Conf/config.php ）。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$model = C(&quot;URL_MODEL);\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;模块设计&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;Application 默认应用目录（可以设置）\r\n|--- Common 公共模块（不能直接访问） \r\n|--- Home 前台模块\r\n|--- Admin 后台模块\r\n|--- ... 其他更多模块\r\n|--- Runtime 默认运行时目录（可以设置）\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;公共模块&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;Common模块是一个特殊的模块，是应用的公共模块，访问所有的模块之前都会首先加载公共模块下面的配置文件（ Conf/config.php ）和公共函数文件（ Common/function.php ）。但Common模块本身不能通过URL直接访问，公共模块的其他文件则可以被其他模块继承或者调用。&lt;br&gt;公共模块的位置可以通过&lt;strong&gt;&lt;em&gt;COMMON_PATH&lt;/em&gt;&lt;/strong&gt;常量改变，我们可以在&lt;strong&gt;入口文件&lt;/strong&gt;中重新定义COMMON_PATH如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;define(\'COMMON_PATH\',\'./Common/\');\r\ndefine(\'APP_PATH\',\'./Application/\');\r\nrequire \'./ThinkPHP/ThinkPHP.php\';\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其应用目录结构变成：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;www WEB部署目录（或者子目录）&lt;br&gt;├─index.php 入口文件&lt;br&gt;├─README.md README文件&lt;br&gt;├─Common 应用公共模块目录&lt;br&gt;├─Application 应用模块目录&lt;br&gt;├─Public 应用资源文件目录&lt;br&gt;└─ThinkPHP 框架目录&lt;br&gt;&lt;strong&gt;定义之后，Application目录下面就不再需要Common目录了。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;自动生成模块目录[，生成后台目录]&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;blockquote&gt;&lt;p&gt;// 绑定Admin模块到当前入口文件&lt;br&gt;define(‘BIND_MODULE’,’Admin’);&lt;br&gt;define(‘APP_PATH’,’./Application/‘);&lt;br&gt;require ‘./ThinkPHP/ThinkPHP.php’;&lt;br&gt;&lt;em&gt;会生成如下目录结构&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Application\r\n|-- Application\r\n   |-- Admin\r\n   |-- Runtime\r\n|-- Common\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;URL模式&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;刚配置好的thinkphp访问index是&lt;a href=&quot;http://serverName/index.php/Home/Index/index&quot; target=&quot;_blank&quot;&gt;http://serverName/index.php/Home/Index/index&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;如果我们直接访问入口文件的话，由于URL中没有模块、控制器和操作，因此系统会访问默认模块&lt;br&gt;（Home）下面的默认控制器（Index）的默认操作（index），因此下面的访问是等效的：&lt;br&gt;&lt;a href=&quot;http://serverName/index.php&quot; target=&quot;_blank&quot;&gt;http://serverName/index.php&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://serverName/index.php/Home/Index/index&quot; target=&quot;_blank&quot;&gt;http://serverName/index.php/Home/Index/index&lt;/a&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;Home模块，Index控制器，index操作&lt;/p&gt;&lt;/blockquote&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;URL模式&lt;/th&gt;&lt;th&gt;URL_MODEL 设置&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;普通模式&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PATHINFO模式&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REWRITE模式&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;兼容模式&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;使用rewrite模式&lt;/strong&gt;&lt;br&gt;如果是Apache则需要在入口文件的同级添加.htaccess文件，内容如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;IfModule mod_rewrite.c&amp;gt;\r\nRewriteEngine on\r\nRewriteCond %{REQUEST_FILENAME} !-d\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]\r\n&amp;lt;/IfModule&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还需要打开Apache的&lt;em&gt;LoadModule rewrite_module modules/mod_rewrite.so&lt;/em&gt;模块&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Directory &quot;D:/www/transfer/blog&quot;&amp;gt;\r\n    Options Indexes FollowSymLinks\r\n    AllowOverride All 开启rewrite\r\n    Order allow,deny\r\n    Allow from all\r\n&amp;lt;/Directory&amp;gt;\r\nAllowOverride All|None|directive-type [directive-type] ...\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;伪静态 config&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;设置支持的伪静态&lt;/p&gt;&lt;pre&gt;&lt;code&gt;\'URL_HTML_SUFFIX\' =&amp;gt; \'html|shtml|xml|php\'\r\n当前访问的伪静态，比如http://serverName/home/index/index/name/liushuanhua.html\r\n会被保存到\r\n__EXT__变量去。上面访问的是.html，那么__EXT__为html\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;URL大小写 config&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;\'URL_CASE_INSENSITIVE\' =&amp;gt;true\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置好后，即使是在Linux环境下面，也可以实现URL访问不再区分大小写了。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://serverName/index.php/Home/Index/index\r\n// 将等效于\r\nhttp://serverName/index.php/home/index/index\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里需要注意一个地方，一旦开启了不区分URL大小写后，如果我们要访问类似&lt;strong&gt;UserTypeController&lt;/strong&gt;的控&lt;br&gt;制器，那么正确的URL访问应该是：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// 正确的访问地址\r\nhttp://serverName/index.php/home/user_type/index\r\n// 错误的访问地址（linux环境下）\r\nhttp://serverName/index.php/home/usertype/index\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用系统提供的&lt;strong&gt;U方法&lt;/strong&gt;（后面一章URL生成会告诉你如何生成）可以为你自动生成相关的URL地址。&lt;br&gt;如果设置&lt;code&gt;\'URL_CASE_INSENSITIVE\' =&amp;gt;false&lt;/code&gt;的话，URL就又变成：&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;http://serverName/index.php/Home/UserType/add&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;URL生成&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;U方法的定义规则如下（方括号内参数根据实际应用决定）：&lt;br&gt;U(‘地址表达式’,[‘参数’],[‘伪静态后缀’],[‘显示域名’])&lt;br&gt;地址表达式&lt;br&gt;地址表达式的格式定义如下：&lt;br&gt;[模块/控制器/操作#锚点@域名]?参数1=值1&amp;amp;参数2=值2…&lt;/p&gt;&lt;pre&gt;&lt;code&gt;eg:\r\n$link = U(&quot;User/index&quot;,array(&quot;name&quot;=&amp;gt;&quot;liushuanhua&quot;,&quot;age&quot;=&amp;gt;25),&quot;shtml&quot;);\r\necho &quot;&amp;lt;a href=&quot;.$link.&quot;&amp;gt;&quot;.$link.&quot;&amp;lt;/a&amp;gt;&quot;;\r\n// 输出\r\n/Home/User/index/name/liushuanhua/age/25.shtml\r\n\r\n$link = U(&quot;Home/User/index#asd@127.0.0.1?name=asd&amp;amp;age=25&quot;);\r\necho &quot;&amp;lt;a href=&quot;.$link.&quot;&amp;gt;&quot;.$link.&quot;&amp;lt;/a&amp;gt;&quot;;\r\n// 输出\r\nhttp://127.0.0.1/Home/User/index/name/asd/age/25.html#asd\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;Ajax ajaxReturn&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;ThinkPHP可以很好的支持AJAX请求，系统的 \\Think\\Controller 类提供了 ajaxReturn 方法用于AJAX调用后返回数据给客户端。&lt;br&gt;并且支持JSON、JSONP、XML和EVAL四种方式给客户端接受数据，并且支持配置其他方式的数据格式返回。&lt;br&gt;ajaxReturn方法调用示例：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$data = \'ok\';\r\n$this-&amp;gt;ajaxReturn($data);\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;支持返回数组数据：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$data[\'status\'] = 1;\r\n$data[\'content\'] = \'content\';\r\n$this-&amp;gt;ajaxReturn($data);\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认配置采用JSON格式返回数据（通过配置DEFAULT_AJAX_RETURN进行设置）。&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/006vbNRojw1f54cjtzcq3j30be04hwee.jpg&quot; alt=&quot;默认json格式&quot;&gt;&lt;br&gt;我们可以指定格式返回，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// 指定XML格式返回数据\r\n$data[\'status\'] = 1;\r\n$data[\'content\'] = \'content\';\r\n$this-&amp;gt;ajaxReturn($data,\'xml\'); 这样会返回一个xml格式的网页\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;xml格式如图：&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006vbNRojw1f54cnl9rl5j30ps0320sj.jpg&quot; alt=&quot;设置xml格式&quot;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;重定向&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;Controller类的redirect方法可以实现页面的重定向功能。&lt;br&gt;redirect方法的参数用法和U函数的用法一致（参考URL生成部分），例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;//重定向到New模块的Category操作\r\n$this-&amp;gt;redirect(\'New/category\', array(\'cate_id\' =&amp;gt; 2), 5, \'页面跳转中...\');\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的用法是停留5秒后跳转到New模块的category操作，并且显示页面跳转中字样，重定向后会改变当前的URL地址。&lt;/p&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;获取变量[获取传参]&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;虽然你仍然可以在开发过程中使用传统方式获取各种系统变量，例如：&lt;br&gt;&amp;gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$id = $_GET[\'id\']; // 获取get变量\r\n$name = $_POST[\'name\']; // 获取post变量\r\n$value = $_SESSION[\'var\']; // 获取session变量\r\n$name = $_COOKIE[\'name\']; // 获取cookie变量\r\n$file = $_SERVER[\'PHP_SELF\']; // 获取server变量\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是我们不建议直接使用传统方式获取，因为没有统一的安全处理机制，后期如果调整的话，改起来会比较麻烦。所以，更好的方式是在框架中统一使用I函数进行变量获取和过滤。&lt;br&gt;I方法是ThinkPHP用于更加方便和安全的获取系统输入变量，可以用于任何地方，用法格式如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I(\'变量类型.变量名/修饰符\',[\'默认值\'],[\'过滤方法或正则\'],[\'额外数据源\'])\r\n&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;变量类型是指请求方式或者输入类型，包括：&lt;/p&gt;&lt;/blockquote&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;变量类型&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;get&lt;/td&gt;&lt;td&gt;获取GET参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;post&lt;/td&gt;&lt;td&gt;获取POST参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;param&lt;/td&gt;&lt;td&gt;自动判断请求类型获取GET、POST或者PUT参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;request&lt;/td&gt;&lt;td&gt;获取REQUEST 参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;put&lt;/td&gt;&lt;td&gt;获取PUT 参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;session&lt;/td&gt;&lt;td&gt;获取 $_SESSION 参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;cookie&lt;/td&gt;&lt;td&gt;获取 $_COOKIE 参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;server&lt;/td&gt;&lt;td&gt;获取 $_SERVER 参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;globals&lt;/td&gt;&lt;td&gt;获取 $GLOBALS参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;path&lt;/td&gt;&lt;td&gt;获取 PATHINFO模式的URL参数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;data&lt;/td&gt;&lt;td&gt;获取 其他类型的参数，需要配合额外数据源参数&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;p&gt;注意：变量类型不区分大小写，变量名则严格区分大小写。&lt;br&gt;默认值和过滤方法均属于可选参数。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;I方法支持默认值：&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I(\'get.id\',0); // 如果不存在$_GET[\'id\'] 则返回0\r\nI(\'get.name\',\'\'); // 如果不存在$_GET[\'name\'] 则返回空字符串\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;采用方法过滤：&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// 采用htmlspecialchars方法对$_GET[\'name\'] 进行过滤，如果不存在则返回空字符串\r\necho I(\'get.name\',\'\',\'htmlspecialchars\');\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;支持直接获取整个变量类型，例如：&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// 获取整个$_GET 数组\r\nI(\'get.\');\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;param变量类型&lt;/em&gt;&lt;/strong&gt;是框架特有的支持自动判断当前请求类型的变量获取方式，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;echo I(\'param.id\');\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果当前请求类型是GET，那么等效于 $_GET[‘id’]，如果当前请求类型是POST或者PUT，那么相当于获取$_POST[‘id’] 或者 PUT参数id。&lt;br&gt;由于param类型是I函数默认获取的变量类型，因此事实上param变量类型的写法可以简化为：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I(\'id\'); // 等同于 I(\'param.id\')\r\nI(\'name\'); // 等同于 I(\'param.name\')\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;data类型变量可以用于获取不支持的变量类型的读取，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I(\'data.file1\',\'\',\'\',$_FILES);\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;变量过滤&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;如果你没有在调用I函数的时候指定过滤方法的话，系统会采用默认的过滤机制（由DEFAULT_FILTER配置），事实上，该参数的默认设置是：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// 系统默认的变量过滤机制\r\n\'DEFAULT_FILTER\' =&amp;gt; \'htmlspecialchars\'\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;过滤类型有：htmlspecialchars，strip_tags，&lt;br&gt;详见文档&lt;strong&gt;变量过滤&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;变量修饰符&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;最新版本的I函数支持对变量使用修饰符功能，可以更方便的通过类型过滤变量。用法如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I(\'变量类型.变量名/修饰符\')\r\n&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;修饰符&lt;/th&gt;&lt;th&gt;作用&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;s&lt;/td&gt;&lt;td&gt;强制转换为字符串类型&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;d&lt;/td&gt;&lt;td&gt;强制转换为整型类型&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;b&lt;/td&gt;&lt;td&gt;强制转换为布尔类型&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;强制转换为数组类型&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;f&lt;/td&gt;&lt;td&gt;强制转换为浮点类型&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;判断请求类型&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;在很多情况下面，我们需要判断当前操作的请求类型是GET 、POST 、PUT或 DELETE，一方面可以针对请求类型作出不同的逻辑处理，另外一方面有些情况下面需要验证安全性，过滤不安全的请求。&lt;br&gt;系统内置了一些常量用于判断请求类型，包括：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;常量&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;IS_GET&lt;/td&gt;&lt;td&gt;判断是否是GET方式提交&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IS_POST&lt;/td&gt;&lt;td&gt;判断是否是POST方式提交&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IS_PUT&lt;/td&gt;&lt;td&gt;判断是否是PUT方式提交&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IS_DELETE&lt;/td&gt;&lt;td&gt;判断是否是DELETE方式提交&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;IS_AJAX&lt;/td&gt;&lt;td&gt;判断是否是AJAX提交&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;REQUEST_METHOD&lt;/td&gt;&lt;td&gt;当前提交类型&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;使用举例如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;class UserController extends Controller{\r\n    public function update(){\r\n        if (IS_POST){\r\n            $User = M(\'User\');\r\n            $User-&amp;gt;create();\r\n            $User-&amp;gt;save();\r\n            $this-&amp;gt;success(\'保存完成\');\r\n        }else{\r\n            $this-&amp;gt;error(\'非法请求\');\r\n        }\r\n    }\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;空操作&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;空操作是指系统在找不到请求的操作方法的时候，会定位到空操作（ _empty ）方法来执行，利用这个机制，我们可以实现错误页面和一些URL的优化。&lt;br&gt;例如，下面我们用空操作功能来实现一个城市切换的功能。 我们只需要给CityController类定义一个_empty （空操作）方法：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php\r\nnamespace Home\\Controller;\r\nuse Think\\Controller;\r\nclass CityController extends Controller{\r\n    public function _empty($name){\r\n        //把所有城市的操作解析到city方法\r\n        $this-&amp;gt;city($name);\r\n    }\r\n    //注意 city方法 本身是 protected 方法\r\n    protected function city($name){\r\n        //和$name这个城市相关的处理\r\n        echo \'当前城市\' . $name;\r\n    }\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;空控制器&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;空控制器的概念是指当系统找不到请求的控制器名称的时候，系统会尝试定位空控制器(EmptyController)，利用这个机制我们可以用来定制错误页面和进行URL的优化。&lt;br&gt;现在我们把前面的需求进一步，把URL由原来的&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://serverName/index.php/Home/City/shanghai/\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;改成&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://serverName/index.php/Home/shanghai/\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样更加简单的方式，如果按照传统的模式，我们必须给每个城市定义一个控制器类，然后在每个控制器类的index方法里面进行处理。可是如果使用空控制器功能，这个问题就可以迎刃而解了。我们可以给项目定义一个EmptyController类&lt;/p&gt;&lt;pre&gt;&lt;code&gt;EmptyController.class.php\r\n&amp;lt;?php\r\nnamespace Home\\Controller;\r\n\r\nuse Think\\Controller;\r\n\r\nclass EmptyController extends Controller\r\n{\r\n    public function _empty($name)\r\n    {\r\n        // **CONTROLLER_NAME**当前控制器名\r\n        $this-&amp;gt;show(&quot;no Controller: &quot; . CONTROLLER_NAME . &quot; and used function: &quot; . $name);\r\n    }\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;实例化模型&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;&lt;code&gt;D方法&lt;/code&gt;和&lt;code&gt;M方法&lt;/code&gt;实例化&lt;br&gt;我们在实例化的过程中，经常使用&lt;code&gt;D方法&lt;/code&gt;和&lt;code&gt;M方法&lt;/code&gt;，这两个方法的区别&lt;br&gt;在于M方法实例化模型无需用户为每个数据表定义模型类，&lt;br&gt;如果D方法没有找到定义的模型类，则会自动调用M方法。&lt;br&gt;自定义的模型类就是在建立&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// Model\\XxxModel.class.php D方法如果没有找到此文件就会调用M方法\r\n&amp;lt;?php\r\nnamespace Home\\Model;\r\nuse Think\\Model;\r\nclass XxxModel extends Model {}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;实例化空模型方法&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;//实例化空模型\r\nnamespace Home\\Controller;\r\nuse Think\\Controller;\r\nuse Think\\Model;\r\n$Model = new Model();\r\n//或者使用M快捷方法是等效的\r\n$Model = M();\r\n//进行原生的SQL查询\r\n$Model-&amp;gt;query(\'SELECT * FROM think_user WHERE status = 1\');\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;自动完成&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;分为&lt;strong&gt;动态完成&lt;/strong&gt;和&lt;strong&gt;静态完成&lt;/strong&gt;&lt;br&gt;两种方式的定义规则都采用：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;array(\r\narray(完成字段1,完成规则,[完成条件,附加规则]),\r\narray(完成字段2,完成规则,[完成条件,附加规则]),\r\n......\r\n);\r\n&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;说明&lt;br&gt;完成字段（必须）&lt;br&gt;需要进行处理的数据表实际字段名称。&lt;br&gt;完成规则（必须）&lt;br&gt;需要处理的规则，配合附加规则完成。&lt;br&gt;完成时间（可选）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;设置自动完成的时间，包括：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;设置&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;self::MODEL_INSERT或者1&lt;/td&gt;&lt;td&gt;新增数据的时候处理（默认）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;self::MODEL_UPDATE或者2&lt;/td&gt;&lt;td&gt;更新数据的时候处理&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;self::MODEL_BOTH或者3&lt;/td&gt;&lt;td&gt;所有情况都进行处理&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;规则包括：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;规则&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;function&lt;/td&gt;&lt;td&gt;使用函数，表示填充的内容是一个函数名&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;callback&lt;/td&gt;&lt;td&gt;回调方法 ，表示填充的内容是一个当前模型的方法&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;field&lt;/td&gt;&lt;td&gt;用其它字段填充，表示填充的内容是一个其他字段的值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;string&lt;/td&gt;&lt;td&gt;字符串（默认方式）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ignore&lt;/td&gt;&lt;td&gt;为空则忽略（3.1.2新增）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php\r\n// CommonModel.class.php\r\nnamespace Home\\Model;\r\nuse Think\\Model;\r\nclass CommonModel extends Model {\r\n    protected $_auto = array(\r\n        array(\'is_delete\',\'0\'), \r\n        array(\'create_time\',\'updateTime\', 1, \'callback\') , \r\n        array(\'update_time\',\'updateTime\',3, \'callback\')\r\n    );\r\n    function updateTime () {\r\n        return time();\r\n    }\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php \r\n// UserModel.class.php\r\n&amp;lt;?php\r\nnamespace Home\\Model;\r\nuse Think\\Model;\r\nclass UserModel extends CommonModel {\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;// IndexController.class.php\r\n&amp;lt;?php\r\nnamespace Home\\Controller;\r\nuse Think\\Controller;\r\nuse Think\\Model;\r\nclass IndexController extends CommonController\r\n{\r\n    public function index()\r\n    {    \r\n        $User = D(&quot;User&quot;);\r\n        $email = &quot;369563963@qq.com&quot;;\r\n        $pwd = md5(sha1(\'sadasdasd\'));\r\n        $data = array(\r\n            &quot;email&quot; =&amp;gt; $email,\r\n            &quot;password&quot; =&amp;gt; $pwd\r\n        );\r\n        if ($User-&amp;gt;create($data)) {\r\n            $User-&amp;gt;add();\r\n        } else {\r\n            $User-&amp;gt;getError();\r\n        }        \r\n        $this-&amp;gt;show(&quot;end&quot;);\r\n    }\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;CREATE方法&lt;/em&gt;&lt;/strong&gt;与&lt;strong&gt;修改数据对象&lt;/strong&gt;&lt;br&gt;在使用create方法创建好数据对象之后，此时的数据对象保存在内存中，因此仍然可以操作数据对象，包括修改或者增加数据对象的值，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$User = D(&quot;User&quot;); // 实例化User对象\r\n$User-&amp;gt;create(); // 生成数据对象\r\n$User-&amp;gt;status = 2; // 修改数据对象的status属性\r\n$User-&amp;gt;register_time = NOW_TIME; // 增加register_time属性\r\n$User-&amp;gt;add(); // 新增用户数据\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一旦调用了add方法（或者save方法），创建在内存中的数据对象就会失效，如果希望创建好的数据对象在后面的数据处理中再次调用，可以保存数据对象先，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$User = D(&quot;User&quot;); // 实例化User对象\r\n$data = $User-&amp;gt;create(); // 保存生成的数据对象\r\n$User-&amp;gt;add();\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过要记得，如果你修改了内存中的数据对象并不会自动更新保存的数据对象，因此下面的用法是错误的：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;$User = D(&quot;User&quot;); // 实例化User对象\r\n$data = $User-&amp;gt;create(); // 保存生成的数据对象\r\n$User-&amp;gt;status = 2; // 修改数据对象的status属性\r\n$User-&amp;gt;register_time = NOW_TIME; // 增加register_time属性\r\n$User-&amp;gt;add($data);\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码我们修改了数据对象，但是仍然写入的是之前保存的数据对象，因此对数据对象的更改操作将会无效。所以就是create会存储好数据，只需要调用add,save而不需要在add()或者save()里面加$data。&lt;/p&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;修改模板目录&lt;/h1&gt;&lt;h3&gt;方法1&lt;/h3&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;define(\'TMPL_PATH\',\'./Apps/Static/\'); // 修改模板目录\r\n结构变成了\r\napps\r\n|-- Admin\r\n|-- Home\r\n|-- Static\r\n    |-- Home\r\n    |-- Admin\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h3&gt;方法2&lt;/h3&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;通过修改&lt;strong&gt;config.php&lt;/strong&gt;文件&lt;/p&gt;&lt;pre&gt;&lt;code&gt;把当前模块的视图目录指定到最外层的Theme目录下面，而不是放到当前模块的View目录下面。 原来的./Application/Home/View/User/add.html 变成了 ./Theme/User/add.html 。\r\n\'VIEW_PATH\'=&amp;gt;\'./Theme/\',\r\n&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;如果同时定义了TMPL_PATH常量和VIEW_PATH设置参数，那么以当前模块的VIEW_PATH参数设置优先。&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;模板赋值&lt;/h1&gt;&lt;h4&gt;方法1&lt;/h4&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;控制器：\r\n$this-&amp;gt;name= &quot;liushuanhua&quot;\r\n$this-&amp;gt;age= &quot;四分之一个世纪&quot;\r\n模板:\r\n{$name}\r\n{$age}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h4&gt;方法2&lt;/h4&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;控制器\r\n$data = array(\r\n    &quot;name&quot;=&amp;gt;&quot;liushuanhua&quot;,\r\n    &quot;age&quot;=&amp;gt;&quot;四分之一个世纪&quot;\r\n);\r\n$this-&amp;gt;assign(\'data\', $data);\r\n模板\r\n{$data.name} or {$data[\'name\']}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;模板替换&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;__ROOT__： 会替换成当前网站的地址（不含域名）\r\n__APP__： 会替换成当前应用的URL地址 （不含域名）\r\n__MODULE__：会替换成当前模块的URL地址 （不含域名）\r\n__CONTROLLER__（__或者__URL__ 兼容考虑）： 会替换成当前控制器的URL地址（不含域名）\r\n__ACTION__：会替换成当前操作的URL地址 （不含域名）\r\n__SELF__： 会替换成当前的页面URL\r\n__PUBLIC__：会被替换成当前网站的公共目录 通常是 /Public/\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h4&gt;通过配置文件修改替换规则&lt;/h4&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;\'TMPL_PARSE_STRING\' =&amp;gt;array(\r\n    \'__PUBLIC__\' =&amp;gt; \'/Common\', // 更改默认的/Public 替换规则\r\n    \'__JS__\' =&amp;gt; \'/Public/JS/\', // 增加新的JS类库路径替换规则\r\n    \'__UPLOAD__\' =&amp;gt; \'/Uploads\', // 增加新的上传路径替换规则\r\n)\r\n或者新增规则\r\n\'TMPL_PARSE_STRING\' =&amp;gt;array(\r\n    \'--PUBLIC--\' =&amp;gt; \'__PUBLIC__\', // 采用新规则输出`__PUBLIC__`字符串\r\n)\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;模板继承&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;模板文件的block标签里面的内容表示可以被被继承的文件修改，比如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// base.html 有这样一段文字\r\n&amp;lt;block name=&quot;title&quot;&amp;gt;&amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;&amp;lt;/block&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;继承文件为index.html&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// index.html\r\n&amp;lt;extend name=&quot;base&quot; /&amp;gt; // 继承base.html模板\r\n&amp;lt;block name=&quot;title&quot;&amp;gt;\r\n    &amp;lt;title&amp;gt;{$title}&amp;lt;/title&amp;gt;\r\n&amp;lt;/block&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;index文件的block[name=”title”]标签里面的内容会完全覆盖base的block[name=”title”]的里面的内容&lt;br&gt;block标签必须指定name属性来标识当前区块的名称，这个标识在当前模板中应该是唯一的，block标签中可以包含任何模板内容，包括其他标签和变量，例如：&lt;/p&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h2&gt;例子：&lt;/h2&gt;&lt;h1&gt;&lt;div&gt;&lt;pre&gt;&lt;code&gt;// base.html\r\n&amp;lt;!DOCTYPE html&amp;gt;\r\n&amp;lt;html lang=&quot;en&quot;&amp;gt;\r\n&amp;lt;head&amp;gt;\r\n    &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;\r\n    &amp;lt;block name=&quot;title&quot;&amp;gt;&amp;lt;title&amp;gt;标题&amp;lt;/title&amp;gt;&amp;lt;/block&amp;gt;\r\n&amp;lt;/head&amp;gt;\r\n&amp;lt;body&amp;gt;\r\n    &amp;lt;block name=&quot;menu&quot;&amp;gt;菜单&amp;lt;/block&amp;gt;\r\n    &amp;lt;block name=&quot;left&quot;&amp;gt;左边分栏&amp;lt;/block&amp;gt;\r\n    &amp;lt;block name=&quot;main&quot;&amp;gt;主内容&amp;lt;/block&amp;gt;\r\n    &amp;lt;block name=&quot;right&quot;&amp;gt;右边分栏&amp;lt;/block&amp;gt;\r\n    &amp;lt;block name=&quot;footer&quot;&amp;gt;底部&amp;lt;/block&amp;gt;\r\n&amp;lt;/body&amp;gt;\r\n&amp;lt;/html&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;// index.html\r\n&amp;lt;extend name=&quot;base&quot; /&amp;gt;\r\n&amp;lt;block name=&quot;title&quot;&amp;gt;\r\n    &amp;lt;title&amp;gt;{$data.title}&amp;lt;/title&amp;gt;\r\n&amp;lt;/block&amp;gt;\r\n&amp;lt;block name=&quot;menu&quot;&amp;gt;\r\n    &amp;lt;a href=&quot;/&quot;&amp;gt;首页&amp;lt;/a&amp;gt;\r\n    &amp;lt;a href=&quot;/info/&quot;&amp;gt;资讯&amp;lt;/a&amp;gt;\r\n    &amp;lt;a href=&quot;/bbs/&quot;&amp;gt;论坛&amp;lt;/a&amp;gt;\r\n&amp;lt;/block&amp;gt;\r\n&amp;lt;block name=&quot;left&quot;&amp;gt;&amp;lt;/block&amp;gt;\r\n&amp;lt;block name=&quot;content&quot;&amp;gt;\r\n    &amp;lt;volist name=&quot;list&quot; id=&quot;vo&quot;&amp;gt;\r\n        &amp;lt;a href=&quot;/new/{$vo.id}&quot;&amp;gt;{$vo.title}&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt; {$vo.content}\r\n    &amp;lt;/volist&amp;gt;\r\n&amp;lt;/block&amp;gt;\r\n&amp;lt;block name=&quot;right&quot;&amp;gt;\r\n    最新资讯：\r\n    &amp;lt;volist name=&quot;news&quot; id=&quot;new&quot;&amp;gt;\r\n        &amp;lt;a href=&quot;/new/{$new.id}&quot;&amp;gt;{$new.title}&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;\r\n    &amp;lt;/volist&amp;gt;\r\n&amp;lt;/block&amp;gt;\r\n&amp;lt;block name=&quot;footer&quot;&amp;gt;\r\n    @ThinkPHP2012 版权所有\r\n&amp;lt;/block&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，子模板中使用了extend标签定义需要继承的模板，extend标签的用法和include标签一样，你也可以加载其他模板：&lt;br&gt;&lt;code&gt;&amp;lt;extend name=&quot;Public:base&quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;或者使用绝对文件路径加载&lt;br&gt;&lt;code&gt;&amp;lt;extend name=&quot;./Template/Public/base.html&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;使用模版表达式&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;模版表达式的定义规则为：模块@主题/控制器/操作,例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;include file=&quot;Public/header&quot; /&amp;gt; // 包含头部模版header\r\n&amp;lt;include file=&quot;Public/menu&quot; /&amp;gt; // 包含菜单模版menu\r\n&amp;lt;include file=&quot;Blue/Public/menu&quot; /&amp;gt; // 包含blue主题下面的menu模版\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以一次包含多个模版，例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;include file=&quot;Public/header,Public/menu&quot; /&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;注意，包含模版文件并不会自动调用控制器的方法，也就是说包含的其他模版文件中的变量赋值需要在当前操作中完成。&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h2&gt;使用模版文件&lt;/h2&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;可以直接包含一个模版文件名（包含完整路径），例如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;include file=&quot;./Application/Home/View/default/Public/header.html&quot; /&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h2&gt;传入参数&lt;/h2&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;无论你使用什么方式包含外部模板，Include标签支持在包含文件的同时传入参数，例如，下面的例子我们在包含header模板的时候传入了title和keywords变量：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;include file=&quot;Public/header&quot; title=&quot;ThinkPHP框架&quot; keywords=&quot;开源WEB开发框架&quot; /&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以在包含的header.html文件里面使用title和keywords变量，如下：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;gt;\r\n&amp;lt;head&amp;gt;\r\n&amp;lt;title&amp;gt;[title]&amp;lt;/title&amp;gt;\r\n&amp;lt;meta name=&quot;keywords&quot; content=&quot;[keywords]&quot; /&amp;gt;\r\n&amp;lt;/head&amp;gt;\r\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;修改定界符&lt;/h1&gt;&lt;h1&gt;&lt;div&gt;&lt;p&gt;默认的定界符用{}，比如{$name}可以输出$name&lt;br&gt;修改定界符：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;TMPL_L_DELIM //模板引擎普通标签开始标记\r\nTMPL_R_DELIM //模板引擎普通标签结束标记\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;eg:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;\'TMPL_L_DELIM\' =&amp;gt; \'&amp;lt;{\',\r\n\'TMPL_R_DELIM\' =&amp;gt; \'}&amp;gt;\'\r\n&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;普通标签的定界符就被修改了，原来的&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;{$name}&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;和&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;{$vo.name}&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;必须使用&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;code&gt;&amp;lt;{$name}&amp;gt;&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;和&lt;code&gt;&amp;lt;{$vo.name}&amp;gt;&lt;/code&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;才能生效了。&lt;/p&gt;&lt;/div&gt;&lt;/h1&gt;&lt;h1&gt;使用wangEditor 富文本编辑器&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.kancloud.cn/&quot; target=&quot;_blank&quot;&gt;地址&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;', '请输入内容', '1', '0', '0', '0', '1467797456', '1467797456');
INSERT INTO `blog_article` VALUES ('2', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('3', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('4', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('5', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('6', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('7', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('8', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('9', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('10', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('11', '1', '1', '1', '1', '0', '0', '0', '1', '1');
INSERT INTO `blog_article` VALUES ('12', '0', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('13', '1', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('14', '2', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('15', '3', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('16', '4', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('17', '5', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('18', '6', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('19', '7', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('20', '8', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('21', '9', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('22', '10', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('23', '11', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('24', '12', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('25', '13', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('26', '14', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('27', '15', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('28', '16', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('29', '17', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('30', '18', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('31', '19', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('32', '20', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('33', '21', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('34', '22', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('35', '23', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('36', '24', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('37', '25', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('38', '26', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('39', '27', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('40', '28', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('41', '29', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('42', '30', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('43', '31', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('44', '32', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('45', '33', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('46', '34', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('47', '35', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('48', '36', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('49', '37', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('50', '38', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('51', '39', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('52', '40', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('53', '41', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('54', '42', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('55', '43', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('56', '44', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('57', '45', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('58', '46', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('59', '47', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('60', '48', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('61', '49', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('62', '50', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('63', '51', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('64', '52', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('65', '53', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('66', '54', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('67', '55', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('68', '56', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('69', '57', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('70', '58', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('71', '59', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('72', '60', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('73', '61', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('74', '62', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('75', '63', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('76', '64', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('77', '65', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('78', '66', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('79', '67', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('80', '68', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('81', '69', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('82', '70', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('83', '71', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('84', '72', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('85', '73', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('86', '74', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('87', '75', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('88', '76', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('89', '77', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('90', '78', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('91', '79', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('92', '80', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('93', '81', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('94', '82', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('95', '83', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('96', '84', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('97', '85', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('98', '86', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('99', '87', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('100', '88', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('101', '89', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('102', '90', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('103', '91', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('104', '92', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('105', '93', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('106', '94', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('107', '95', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('108', '96', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('109', '97', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('110', '98', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('111', '99', null, null, '1', '0', '0', '0', null, null);
INSERT INTO `blog_article` VALUES ('112', '啊？啊', null, null, '1', '0', '0', '0', null, null);

-- ----------------------------
-- Table structure for blog_tags
-- ----------------------------
DROP TABLE IF EXISTS `blog_tags`;
CREATE TABLE `blog_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `create_time` int(11) DEFAULT NULL,
  `update_time` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_tags
-- ----------------------------

-- ----------------------------
-- Table structure for blog_user
-- ----------------------------
DROP TABLE IF EXISTS `blog_user`;
CREATE TABLE `blog_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `is_delete` int(1) NOT NULL DEFAULT '0',
  `create_time` int(11) DEFAULT NULL,
  `update_time` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_user
-- ----------------------------
INSERT INTO `blog_user` VALUES ('1', '369563963@qq.com', '97f2e9b352f7d8b14e124ca7b3fc03e4', '0', '1466760621', '1466760621');
